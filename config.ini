###################################
#####                         #####
#####     GENERAL SECTION     #####
#####                         #####
###################################
# (plugin metadatas)
[general]

# Notes about the name of the plugin:
# - the name of the plugin is given by the content of .layerapi2_label
#   in this directory (format: plugin_{name of the plugin}@mfserv)
# - the old "name" key in this file is not used anymore

# Version of the plugin (X.Y.Z)
# If the value is {{MFMODULE_VERSION}},
# the current module version is used
version=0.0.2

# Summary (one line) of the goal of the plugin
summary=apicvf django apps for middleware

# License of the plugin
license=Proprietary

# URL of the plugin homepage
url=http://yourpluginhomepage

# Name of the maintainer of the plugin on the form "Firstname FAMILYNAME <email>"
maintainer=gcf gwenael.cesar-fellmann@meteo.fr

# Vendor of the plugin
vendor=MetWork

# !!! ADVANCED SETTING !!!
# Use this only if you are sure about what you are doing
# extra nginx configuration filename inside your plugin directory
# null => no extra configuration
# The content will be included directly in "http" section
# If you want to include some configuration fragments specific to an app
# don't use this key (in [general] section] but extra_nginx_conf_filename
# in [app_xxxxx] section.
# Note: if you use this key, you can break the whole mfserv module
#       => so there will be a warning at plugin installation about that
# Note: the different between this key and the one just bellow is that
#       the configuration fragment will be inserted in "http" section
#       (for this one) and in "server" section (for the one above)
extra_nginx_http_conf_filename=null

# !!! ADVANCED SETTING !!!
# Use this only if you are sure about what you are doing
# extra nginx configuration filename inside your plugin directory
# null => no extra configuration
# The content will be included directly in "server" section
# If you want to include some configuration fragments specific to an app
# don't use this key (in [general] section] but extra_nginx_conf_filename
# in [app_xxxxx] section.
# Note: this key is not used with virtualdomain_based_routing
# Note: if you use this key, you can break the whole mfserv module
#       => so there will be a warning at plugin installation about that
# Note: the different between this key and the one just above is that
#       the configuration fragment will be inserted in "server" section
#       (for this one) and in "http" section (for the one above)
extra_nginx_server_conf_filename=null

# !!! ADVANCED SETTING !!!
# Use this only if you are sure about what you are doing
# extra nginx configuration filename inside your plugin directory
# null => no extra configuration
# The content will be included directly in "init_worker_by_lua_block" section
# and must be valid LUA code!
# Note: if you use this key, you can break the whole mfserv module
#       => so there will be a warning at plugin installation about that
extra_nginx_init_worker_by_lua_block_filename=null

# If you need a redis instance for your plugin for basic needs (no persistence,
# max of 0.5GB of memory), you can set redis_service key to 1.
# To connect to your instance, use an unix socket connection to
# the value of REDIS_SOCKET_UNIX_SOCKET_PATH env var.
redis_service=0

###############################
#####                     #####
#####     APP SECTION     #####
#####                     #####
###############################
# (Note: for django plugins, you can only ONE section [app_xxx])

[app_apicvf_django]

type=python3_sync

# number of workers
workers={{MFCOM_HARDWARE_NUMBER_OF_CPU_CORES_MULTIPLIED_BY_2}}

# timeout (in seconds) for one request
# (if null or <=0, the MFSERV_NGINX_TIMEOUT is used)
timeout=0

# wsgi function entry point (main arg for gunicorn)
# don't change this for this plugin template
main_arg=apicvf_django.wsgi:application

# if you set debug=1, then you will get an interactive debugger
# when you got an exception in your code
# (max age will also be automatically set to 0 and mflog minimal level will be
#  set to DEBUG)
# DON'T USE IT ON PRODUCTION!!!
debug = 0

# Use prefix based routing:
# http://{host}:{port}/{plugin_name}/{app_name}/...
# (and/or)
# http://{host}:{port}/{plugin_name}/... if app_name == main or only one app in the plugin
prefix_based_routing=true

# Use virtualdomain based routing
# http://{app_name}.{plugin_name}.{host}:{port}/...
# (and/or)
# http://{plugin_name}.{host}:{port}/... if app_name == main or only one app in the plugin
# NOTE: you need a DNS "catch all" to do that (like a DNS CNAME *.{host} => {ip_of_the_host}
virtualdomain_based_routing=false

# Route directly at the webserver part /static/ url path to static directory
# inside the application directory
static_routing=true

# !!! ADVANCED SETTING !!!
# Add extra routes to your plugin (starting by /, not ending by /, separated by ;)
# Example: prefix_based_routing_extra_routes=/foo;/bar
# null => no extra routes
# / => all routes
# Note: if you use this key, you can break the whole mfserv module
#       and generate some conflicts with other plugins
#       => so there will be a warning at plugin installation about that
prefix_based_routing_extra_routes=null

# !!! ADVANCED SETTING !!!
# use this only if you are sure about what you are doing
# extra nginx configuration filename inside your plugin directory
# null => no extra configuration
# the content will be included directly in your app "location" section
# if you want to include some configuration fragments at a more general level
# don't use this key but those in the [general] section
# Note: if you use virtualdomain_based_routing, the content will be included
# in the custom "server" section (specific to your app and not in "location")
extra_nginx_conf_filename=null

# !!! ADVANCED SETTING !!!
# use this only if you are sure about what you are doing
# extra nginx configuration filename inside your plugin directory
# null => no extra configuration
# the content will be included directly in your app "location" section for
# the "static" routing part (see also extra_nginx_conf_filename key for
# the "dynamic" part)
# if you want to include some configuration fragments at a more general level
# don't use this key but the one in [general] section)
extra_nginx_conf_static_filename=null

# If true, add plugin directory to python path
add_plugin_dir_to_python_path=true

# If true, add app directory to python path
add_app_dir_to_python_path=false

# resource limit for each app worker
# rlimit_as => maximum area (in bytes) of address space which may be taken by the worker.
# rlimit_nofile => maximum number of open file descriptors for the current worker.
# rlimit_stack => maximum size (in bytes) of the call stack for the current worker.
#     This only affects the stack of the main thread in a multi-threaded worker.
# rlimit_core => maximum size (in bytes) of a core file that the current worker can create.
# rlimit_fsize =>  maximum size of a file which the worker may create.
# (empty value means no limit)
rlimit_as = 1000000000
rlimit_nofile = 1000
rlimit_stack = 10000000
rlimit_core = 100000
rlimit_fsize = 100000000

# If set then the process will be restarted sometime after max_age and
# max_age + random(0, max_age) seconds.
# 0 => disable this feature
# Note: the feature is automatically disabled if workers=1
# Note: 60 seconds is a minimum
max_age = 3600

# The number of seconds to wait for a process to terminate gracefully before killing it.
# When stopping a worker process, we first send it a SIGTERM.
# A worker may catch this signal to perform clean up operations before exiting
# like finishing to reply to already accepted requests.
# If the worker is still active after graceful_timeout seconds, we send it a
# SIGKILL signal. It is not possible to catch SIGKILL signals so the worker will stop.
graceful_timeout = 30

# !!! ADVANCED SETTINGS !!!
# You can add extra daemons which will be launched within your plugin
# by providing configuration blocks [extra_daemon_*]
# You have to provide a command to daemonize (the command must run in
# foreground and not daemonize by itself)
# [extra_daemon_foo]
# cmd_and_args = /your/foreground/command command_arg1 command_arg2
# numprocesses=1
# graceful_timeout = 30
# rlimit_as = 1000000000
# rlimit_nofile = 1000
# rlimit_stack = 10000000
# rlimit_core = 100000
# rlimit_fsize = 100000000

