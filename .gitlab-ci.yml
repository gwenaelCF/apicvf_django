# Image Docker avec mfserv
image: registry.gitlab.meteo.fr:80/metwork-plugins/docker_build/mfserv-gitlab-ci:2.4

# Base PostgreSQL pour les tests unitaires Django
services:
  - postgres:latest

# Étapes du pipeline
stages:
  - unittests
  - sonar
  - build

# Variables pour la base PostgreSQL
variables:
  POSTGRES_DB: plugin_apicvf_base
  POSTGRES_USER: metwork
  POSTGRES_PASSWORD: metwork
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 7432

# Lance tests unitaires + couverture
unit-testing:
  stage: unittests
  script:
    - echo '1. Launch unittests + coverage'
    - su - mfserv
    - mfserv.start
	- make release
	- plugins.install apicvf_django-*.metwork.mfserv.plugin
    - coverage run --source='carto' manage.py test carto.tests --keepdb
    - coverage xml

# Scanne le code et envoi sur http://sonar.meteo.fr/dashboard?id=apic%3Acarto
# Les étapes post 'sonar-scanner' servent à remonter le résultat de l'analyse à Gitlal CI/CD
scan-sonar:
  stage: sonar
  script:
    - echo '2. Launch Sonar'
    - sonar-scanner
    - export url=$(cat .scannerwork/report-task.txt | grep ceTaskUrl | cut -c11-)
    - sleep 5s #Wait time for the report
    - curl -k $url -o analysis.txt #store results in analysis.txt
    - export status=$(cat analysis.txt | jq -r '.task.status') #Get the status as SUCCESS, CANCELED or FAILED
    - export analysisId=$(cat analysis.txt | jq -r '.task.analysisId') #Get the analysis Id
    - curl -k  http://sonar.meteo.fr/api/qualitygates/project_status?analysisId=$analysisId -o result.txt;
    - export result=$(cat result.txt | jq -r '.projectStatus.status');
    - if [ “$result” == “ERROR” ]; then echo -e 'SONAR RESULTS FAILED'; exit 1; fi

# Constuction plugin
build-artifacts:
  stage: build
  script:
    - echo '3. Build plugin'
    # TODO
    